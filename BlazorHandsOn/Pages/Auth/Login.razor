@layout AuthLayout
@using BlazorHandsOn.Shared.Models

@inject AuthenticationService authService
@inject ILocalStorageService storageService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider

<div class="row">
	<div class="col-12">
		<h2>Login</h2>
		<hr />
		<EditForm Model="loginRequest" OnValidSubmit="LoginUser">
			<AlertMessage Message="@message" MessageType="@messageType" />
			<DataAnnotationsValidator />
			<ValidationSummary />

			<div class="form-group">
				<label>Email</label>
				<TelerikTextBox Class="form-control" @bind-Value="loginRequest.Email" PlaceHolder="Enter your Email"></TelerikTextBox>
			</div>

			<div class="form-group">
				<label>Password</label>
				<TelerikTextBox Class="form-control" @bind-Value="loginRequest.Password" Password="true" PlaceHolder="Enter your password"></TelerikTextBox>
			</div>

			<TelerikButton Class="login-button-tab" Primary="true" Enabled="!isBusy">Login</TelerikButton>
		</EditForm>
	</div>
</div>


@code {
	LoginRequest loginRequest = new LoginRequest();
	bool isBusy = false;
	string message = string.Empty;
	AlertTypes messageType = AlertTypes.Success;
	public async Task LoginUser()
	{
		isBusy = true;

		var response = await authService.LoginUserAsync(loginRequest);

		if (response.IsSuccess)
		{
			messageType = AlertTypes.Success;
			LocalUserInfo userInfo = new LocalUserInfo
			{
				AccessToken = response.Message,
				FirstName = response.UserInfo["FirstName"],
				LastName = response.UserInfo["LastName"],
				Email = response.UserInfo["Email"],
				Id = response.UserInfo[System.Security.Claims.ClaimTypes.NameIdentifier]
			};
			await storageService.SetItemAsync("User", userInfo);
			await authenticationStateProvider.GetAuthenticationStateAsync();
			navigationManager.NavigateTo("/");
		}
		else
		{
			message = response.Message;
			messageType = AlertTypes.Success;
		}
		isBusy = false;
	}
}
